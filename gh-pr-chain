#!/usr/bin/env bash
# Copyright 2022 Tom Counsell MIT License https://opensource.org/licenses/MIT
#
# The goal of this command is to make it easy to move around chains of pull requests
#
# A chain of pull requests is where one pull request depends on another pull request
# which depends on another pull request...
#
# This must be installed as an extension of the gh command
# https://cli.github.com/manual/gh_extension
# gh install tamc/gh-pr-chain
#
# 
set -e
set -o errexit 
set -o pipefail

Help()
{
   echo "Move around chains of pull requests (PRs)"
   echo
   echo "A chain of PRs is where one PR is based upon another, which in turn"
   echo "is based on another, and so on."
   echo
   echo "Syntax: gh pr-chain [next|my-next|previous|merge-previous]"
   echo 
   echo "next           Go to a PR that is based on this PR"
   echo "my-next        Go to a PR that is based on this PR and that I authored"
   echo "previous       Go to the PR that this PR is based upon"
   echo "previous       Go to the PR that this PR is based upon"
   echo "merge-previous Git merge changes from the PR that this PR is based upon"
   echo 
   echo "File issues at https://github.com/tamc/gh-pr-chain"
}

# First argument is the author. @me means current user. blank means any user.
Next()
{
  local AUTHOR=$1
  local CURRENT_BRANCH=$(git branch --show-current)
  local NEXT_PRS=($(gh pr list --base $CURRENT_BRANCH --author "$AUTHOR" --json headRefName | jq -r '.[] | .headRefName'))
        
  # There may be several PRs that are based upon this branch, so we may
  # need to ask the user to choose between them.
  case ${#NEXT_PRS[@]} in
    0)  echo "No pull requests are based upon this branch ($CURRENT_BRANCH)"
        ;;
    1)  git checkout ${NEXT_PRS[0]}
        ;;
    *)  select NEXT in ${NEXT_PRS[@]}
        do
          git checkout $NEXT
          break
        done
        ;;
  esac
}

Previous()
{
  # There is only ever one previous branch, so this is easy
  git checkout $(gh pr view --json baseRefName | jq -r ".baseRefName")
}

MergePrevious()
{
  # There is only ever one previous branch, so this is easy
  git merge $(gh pr view --json baseRefName | jq -r ".baseRefName")
}

Version()
{
  # Show the tag name, but make sure we are looking at the repo of this command
  local SCRIPT_DIRECTORY=$(dirname -- "$0")
  git -C $SCRIPT_DIRECTORY describe --tags
}


case $1 in 
  next) # Go to the next PR
        Next
        exit;;
  my-next) # Go the next PR that I authored
        Next "@me"
        exit;;
  previous) # Go to the previous PR
        Previous
        exit;;
  merge-previous) # Merge the previous PR into this one
        MergePrevious
        exit;;
  -v|--version) # Show the current version of this script
        Version 
        exit;;
  *) # Display some Help
        Help
        exit;;
esac
