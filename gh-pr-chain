#!/usr/bin/env bash
# Copyright 2022 Tom Counsell MIT License https://opensource.org/licenses/MIT
#
# The goal of this command is to make it easy to move around chains of pull requests
#
# A chain of pull requests is where one pull request depends on another pull request
# which depends on another pull request...
#
# This must be installed as an extension of the gh command
# https://cli.github.com/manual/gh_extension
# gh install tamc/gh-pr-chain
#
# 
set -e
set -o errexit 
set -o pipefail

Help()
{
   echo "Move around chains of pull requests (PRs)"
   echo
   echo "A chain of PRs is where one PR is based upon another, which in turn"
   echo "is based on another, and so on."
   echo
   echo "Syntax: gh pr-chain [next|my-next|previous|merge-previous|merge-up-chain|create|insert|squash-into-previous|squash-chain]"
   echo 
   echo "next                 Go to a PR that is based on this PR"
   echo "my-next              Go to a PR that is based on this PR and that I authored"
   echo "previous             Go to the PR that this PR is based upon"
   echo "merge-previous       Git merge changes from the branch that this PR is based upon"
   echo "merge-up-chain       Merge changes from this branch up into the next PR. Then pushes. Then repeats up the chain."
   echo "create 'PR Title'    Create a draft PR that is based on this PR"
   echo "                     This will also create then checkout a branch with the same name."
   echo "insert 'PR Title'    Insert a draft PR _before_ this PR"
   echo "                     This will also create then checkout a branch with the same name."
   echo "                     It will also change this PR to be based on the newly created PR."
   echo "squash-into-previous This will squash merge this PR into its base branch."
   echo "                     It will check the PR has been approved."
   echo "                     It will use the PR title and body for the commit title and body."
   echo "                     It will close the PR and delete the branch."
   echo "squash-chain         This will squash a chain of PRs into the current branch."
   echo "                     Each PR will become a single commit."
   echo "                     It is like calling squash-into-previous repeatedly."
   echo 
   echo "File issues at https://github.com/tamc/gh-pr-chain"
}

# Bash escaping can be a bit tricky. This helps to insert newlines into strings
NEWLINE=$'\n'

# First argument is the author. @me means current user. blank means any user.
Next()
{
  local AUTHOR=$1
  local CURRENT_BRANCH=$(git branch --show-current)
  local NEXT_PRS=($(gh pr list --base $CURRENT_BRANCH --author "$AUTHOR" --json headRefName | jq -r '.[] | .headRefName'))
        
  # There may be several PRs that are based upon this branch, so we may
  # need to ask the user to choose between them.
  case ${#NEXT_PRS[@]} in
    0)  echo "No pull requests are based upon this branch ($CURRENT_BRANCH)"
        exit 1
        ;;
    1)  git checkout ${NEXT_PRS[0]}
        ;;
    *)  select NEXT in ${NEXT_PRS[@]}
        do
          git checkout $NEXT
          break
        done
        ;;
  esac
}

Previous()
{
  # There is only ever one previous branch, so this is easy
  git checkout $(gh pr view --json baseRefName | jq -r ".baseRefName")
}

MergePrevious()
{
  # There is only ever one previous branch, so this is easy
  git merge --no-edit $(gh pr view --json baseRefName | jq -r ".baseRefName")
}

MergeUpChain()
{
  # This is the same as repeatedly doing:
  # 1) gh pr-chain my-next
  # 2) gh pr-chain merge-previous
  # 3) git push
  # ... until the end of the chain.
  # It should halt on any conflict.
  while true; do
    # We stop doing the loop anytime we get any non-zero exit code.
    # This should trap
    Next "@me" || break
    MergePrevious || break
    git push
  done
}

Version()
{
  # Show the tag name, but make sure we are looking at the repo of this command
  local SCRIPT_DIRECTORY=$(dirname -- "$0")
  git -C $SCRIPT_DIRECTORY describe --tags
}

# First argument is the title of the pull request
Create()
{
  local NEW_PR_TITLE="$1"
  local CURRENT_PR_NUMBER=$(gh pr view --json number | jq -r ".number")
  
  if [ -n "$CURRENT_PR_NUMBER"]; then
    local NEW_PR_BODY="This PR is based on PR #$CURRENT_PR_NUMBER"
  fi
  local CURRENT_BRANCH=$(git branch --show-current)
  # Better regular expression mangling
  shopt -s extglob
  # Replace characters that aren't valid in a git branch name with -
  local SAFE_GIT_BRANCH_NAME="${NEW_PR_TITLE//+([^[:alnum:]])/-}"
  # Lowercase the branch name, because that seems nicer to me
  local NEW_BRANCH="$(echo "$SAFE_GIT_BRANCH_NAME" |  tr '[:upper:]' '[:lower:]')"
  git checkout -b $NEW_BRANCH
  git commit --allow-empty -m "Empty commit required to create a draft PR from the CLI"
  git push -u origin HEAD
  gh pr create --title "$NEW_PR_TITLE" --body "$NEW_PR_BODY" --base $CURRENT_BRANCH --head $NEW_BRANCH --assignee "@me" --draft
}

# First argument is the title of the pull request
Insert()
{
  local NEW_PR_TITLE="$1"
  # Keep a copy of the current PR number so we can update it later
  local STARTING_PR_NUMBER=$(gh pr view --json number | jq -r ".number")
  # Move up the chain one
  Previous
  # Create the new PR
  Create "$NEW_PR_TITLE"
  # We should now be on the new PR's branch
  local CURRENT_BRANCH=$(git branch --show-current)
  # Update the base branch of the original PR to point to this new branch
  gh pr edit "$STARTING_PR_NUMBER" --base "$CURRENT_BRANCH"
}

SquashIntoPrevious()
{
  # Check PR has been approved
  local PR=$(gh pr view --json reviewDecision,title,number,body,url)
  local REVIEW_DECISION=$(echo "$PR" | jq -r ".reviewDecision")
  if [ "$REVIEW_DECISION" != "APPROVED" ]
  then
    echo "PR has not been approved. Merge aborted."
    exit 1
  fi
  # Gather information about this PR ready to make the squash commit
  local PR_NUMBER=$(echo "$PR" | jq -r ".number")
  local PR_TITLE=$(echo "$PR" | jq -r ".title")
  local PR_BODY=$(echo "$PR" | jq -r ".body")
  local PR_URL=$(echo "$PR" | jq -r ".url")
  local COMMIT_TITLE="$PR_TITLE (#$PR_NUMBER)"
  local COMMIT_BODY="$PR_BODY$NEWLINE$NEWLINE$PR_URL"
  
  echo "Waiting for checks to finish."
  gh pr checks --required --watch
  echo "Required checks complete. Merging."
  gh pr merge --squash --subject "$COMMIT_TITLE" --body "$COMMIT_BODY" --delete-branch
  echo "Merged"
}

SquashChain()
{
  # Keep note of our current branch as the target
  # Prompt user to go to next PR
  # Take note of the next PR in the chain
  # Squash this PR down into the current branch
  # Checkout the next PR in the chain
  # Merge the current branch into that branch
  # Merge up the chain
  # Check out the next PR in the chain
  # Take not of the following PR in the chain
  # Squash this PR down into the current branch
  # repeat...
  local TARGET_BRANCH=$(git branch --show-current)
  Next || exit 1
  local CURRENT_BRANCH=$(git branch --show-current)
  while true; do
    local NEXT_PRS=($(gh pr list --base $CURRENT_BRANCH --author "$AUTHOR" --json headRefName | jq -r '.[] | .headRefName'))
    gh pr checks --required --watch
    SquashIntoPrevious || exit 1
    case ${#NEXT_PRS[@]} in
      0)  echo "No pull requests are based upon $CURRENT_BRANCH. Finished."
          exit 1
          ;;
      1)  git checkout ${NEXT_PRS[0]}
          ;;
      *)  select NEXT in ${NEXT_PRS[@]}
          do
            git checkout "$NEXT"
            break
          done
          ;;
    esac
    MergePrevious || exit 1
    git push
    CURRENT_BRANCH=$(git branch --show-current)
    MergeUpChain || true
    git checkout "$CURRENT_BRANCH"
  done
}

case $1 in 
  next) # Go to the next PR
        Next
        exit;;
  my-next) # Go the next PR that I authored
        Next "@me"
        exit;;
  previous) # Go to the previous PR
        Previous
        exit;;
  merge-previous) # Merge the previous PR into this one
        MergePrevious
        exit;;
  merge-up-chain) # Merge this branches changes up into subsequent PRs
        MergeUpChain
        exit;;
  create) # Create a new PR based on this one
    if [ -z "$2" ]
    then
      echo "Please pass in a title for the Pull request"
      echo "Note that if the title is more than one word, you probably need to quote it, like this example:"
      echo "gh pr-chain create 'my pull request title'"
      exit 1
    fi
        Create "$2" # Note it is important to quote $2 otherwise will split into multiple arguments on whitespace
        exit;;
  insert) # Create a new PR before this one, updating this one to be based upon it
    if [ -z "$2" ]
    then
      echo "Please pass in a title for the Pull request"
      echo "Note that if the title is more than one word, you probably need to quote it, like this example:"
      echo "gh pr-chain insert 'my pull request title'"
      exit 1
    fi
        Insert "$2" # Note it is important to quote $2 otherwise will split into multiple arguments on whitespace
        exit;;
  squash-into-previous) # Squash merge into base branch, close PR, delete branch
    SquashIntoPrevious
    exit;;
  squash-chain) # Merge a chain of PRs into this branch. Each PR is its own commit. Each PR is closed.
    SquashChain
    exit;;
  -v|--version) # Show the current version of this script
        Version 
        exit;;
  *) # Display some Help
        Help
        exit;;
esac
